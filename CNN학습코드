# 💾 기존 학습된 모델 불러오기
model = CNN_LSTM_Classifier(num_classes=len(dataset.label_to_idx))
uploaded = files.upload()
model.load_state_dict(torch.load("cnn_lstm_improved_v1.pt"))
model.to(device)

# ✅ 모델 학습
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = CNN_LSTM_Classifier(num_classes=len(dataset.label_to_idx)).to(device)
criterion = CrossEntropyLoss(weight=class_weights)
optimizer = torch.optim.Adam(model.parameters(), lr=0.0001)

train_idx, val_idx = train_test_split(list(range(len(dataset))), test_size=0.2, random_state=42)
train_dataset = Subset(dataset, train_idx)
val_dataset = Subset(dataset, val_idx)
train_loader = DataLoader(train_dataset, batch_size=4, shuffle=True, num_workers=0)
val_loader = DataLoader(val_dataset, batch_size=4, shuffle=False, num_workers=0)

EPOCHS = 10
for epoch in range(EPOCHS):
    model.train()
    total_loss = 0
    for inputs, labels in train_loader:
        inputs, labels = inputs.to(device), labels.to(device)
        outputs = model(inputs)
        loss = criterion(outputs, labels)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        total_loss += loss.item()

    avg_train_loss = total_loss / len(train_loader)

    # 검증
    model.eval()
    correct = 0
    total = 0
    with torch.no_grad():
        for inputs, labels in val_loader:
            inputs, labels = inputs.to(device), labels.to(device)
            outputs = model(inputs)
            preds = torch.argmax(outputs, dim=1)
            correct += (preds == labels).sum().item()
            total += labels.size(0)
    val_acc = correct / total
    print(f"[Epoch {epoch+1}/{EPOCHS}] | Train Loss: {avg_train_loss:.4f} | Val Acc: {val_acc:.4f}")

# 모델 저장
torch.save(model.state_dict(), "cnn_lstm_improved_v2.pt")
print("학습 완료: cnn_lstm_improved_v2.pt")
from google.colab import files
files.download("cnn_lstm_improved_v2.pt")
